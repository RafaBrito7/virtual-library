package com.axians.virtuallibrary.api.model.dto;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;

import com.axians.virtuallibrary.api.model.entity.User;
import com.axians.virtuallibrary.commons.utils.Utils;
import com.axians.virtuallibrary.commons.utils.enums.StatusUserEnum;
import com.axians.virtuallibrary.commons.utils.enums.UserRolesEnum;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import io.swagger.annotations.ApiModelProperty;

public class UserDTO {

	@NotBlank(message = "Name cannot be null or empty!")
	@ApiModelProperty(notes = "The name of the user", required = true, example = "Rafael Brito")
	private String name;

	@NotBlank(message = "Email cannot be null or empty!")
	@Email
	@ApiModelProperty(notes = "The email of the user, used for login (unique attribute)", required = true, example = "rafa@gmail.com")
	private String email;

	@NotBlank(message = "Password cannot be null or empty!")
	@ApiModelProperty(notes = "The password of the user, used for login (saved to database using cryptography)", required = true, example = "1234")
	private String password;

	@NotBlank(message = "Profile cannot be null or empty!")
	@ApiModelProperty(notes = "The permission of the user(accepted values: 'ADMIN', 'USER' and 'VIEWER')", required = true, example = "USER")
	private String profile;

	@JsonIgnoreProperties
	@ApiModelProperty(notes = "The status of the user(generated by the application by default 'ACTIVE')", required = false, example = "ACTIVE")
	private StatusUserEnum status;
	
	@ApiModelProperty(notes = "The unique identifier of any resource within the application(generated by the application Used UUID Generator version 4)", required = false, example = "52666e04-0872-492e-9134-8a4032ef07ab")
	private String resourceHyperIdentifier;
	
	@ApiModelProperty(notes = "The date and time the user was created in the system(generated by the application)", required = false)
	private Date createdDate;
	
	@ApiModelProperty(notes = "The list of rented book by this user", required = false)
	private List<BookDTO> rentedBooks = new ArrayList<>();

	public UserDTO() {}

	public UserDTO(String name, String email, String password, String profile, String resourceHyperIdentifier,
			Date createdDate) {
		this.name = name;
		this.email = email;
		this.password = password;
		this.profile = profile;
		this.resourceHyperIdentifier = resourceHyperIdentifier;
		this.createdDate = createdDate;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public UserRolesEnum getProfile() {
		return UserRolesEnum.getEnumByName(profile);
	}

	public void setProfile(String profile) {
		this.profile = profile;
	}
	
	public StatusUserEnum getStatus() {
		return status;
	}

	public void setStatus(StatusUserEnum status) {
		this.status = status;
	}

	public String getResourceHyperIdentifier() {
		return resourceHyperIdentifier;
	}

	public void setResourceHyperIdentifier(String resourceHyperIdentifier) {
		this.resourceHyperIdentifier = resourceHyperIdentifier;
	}

	public Date getCreatedDate() {
		return createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	public List<BookDTO> getRentedBooks() {
		return rentedBooks;
	}

	public void setRentedBooks(List<BookDTO> rentedBooks) {
		this.rentedBooks = rentedBooks;
	}

	public User generatePersistObject() {
		return new User(this.name, this.email, this.password, this.profile);
	}
	
	public User generatePersistObjectToCreate() {
		User user = generatePersistObject();
		user.setResourceHyperIdentifier(Utils.generateResourceHyperIdentifier());
		user.setPassword(Utils.encoderPassword(this.password));
		user.setCreatedDate(new Date());
		user.setDeleted(false);
		return user;
	}

}
